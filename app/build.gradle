buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    //noinspection GradleDynamicVersion
    compile 'org.bitbucket.frankmonza:kustomapi:+'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.7@aar') {
        transitive = true;
    }
}
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "arun.com.chameleonskinforkwlp"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 4
        versionName "2.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        manifestPlaceholders = [crashlyticsApiKey: getFabricKey()]
    }
    buildTypes {
        release {
            shrinkResources false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        aaptOptions {
            noCompress 'zip', 'komp', 'klwp', 'kwgt', 'klck', 'kwch'
        }
    }
    dataBinding {
        enabled = true
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

    compile 'com.github.bumptech.glide:glide:3.7.0'

    compile 'com.android.support:cardview-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:palette-v7:25.3.1'

    compile "com.mikepenz:iconics-core:2.8.2@aar"
    compile 'com.mikepenz:google-material-typeface:3.0.1.0.original@aar'

    compile 'com.jakewharton.timber:timber:4.5.1'

    compile('com.mikepenz:materialdrawer:5.9.0@aar') {
        transitive = true
    }
}

static def getFabricKey() {
    try {
        Properties properties = new Properties()
        properties.load(new FileInputStream("values.properties"))
        return properties.getProperty("FABRIC_KEY")
    } catch (Exception ignored) {
        return ""
    }
}
